uendle@servidor1:/etc$ ls in?d
ls: cannot access 'in?d': No such file or directory


uendle@servidor1:/etc$ ls in?*
inputrc

init.d:
apparmor          cryptdisks        hwclock.sh         kmod           open-vm-tools  rsync           ufw
apport            cryptdisks-early  irqbalance         lvm2           plymouth       screen-cleanup  unattended-upgrades
console-setup.sh  dbus              iscsid             lvm2-lvmpolld  plymouth-log   ssh             uuidd
cron              grub-common       keyboard-setup.sh  open-iscsi     procps         udev

initramfs-tools:
conf.d  hooks  initramfs.conf  modules  scripts  update-initramfs.conf


uendle@servidor1:~$ touch arq
uendle@servidor1:~$ ls
arq


uendle@servidor1:~$ touch arq1.txt
uendle@servidor1:~$ touch arq2.txt
uendle@servidor1:~$ touch arq3.txt
uendle@servidor1:~$ touch arq4.txt
uendle@servidor1:~$ touch arq5.txt
uendle@servidor1:~$ ls
arq1.txt  arq2.txt  arq3.txt  arq4.txt  arq5.txt



uendle@servidor1:~$ ls ar?[1-3]*
arq1.txt  arq2.txt  arq3.txt


uendle@servidor1:~$ ls ar?[1,3]*
arq1.txt  arq3.txt


uendle@servidor1:~$ ls ar?[^1,3]*
arq2.txt  arq4.txt  arq5.txt



uendle@servidor1:~$ mkdir diretorio
uendle@servidor1:~$ mv arq
arq1.txt  arq2.txt  arq3.txt  arq4.txt  arq5.txt


uendle@servidor1:~$ ls
arq1.txt  arq2.txt  arq3.txt  arq4.txt  arq5.txt  diretorio

uendle@servidor1:~$ cp arq* diretorio/
uendle@servidor1:~$ ls
arq1.txt  arq2.txt  arq3.txt  arq4.txt  arq5.txt  diretorio
uendle@servidor1:~$ ls diretorio/
arq1.txt  arq2.txt  arq3.txt  arq4.txt  arq5.txt


uendle@servidor1:~$ find . -name "arq*"
./arq2.txt
./arq4.txt
./diretorio/arq2.txt
./diretorio/arq4.txt
./diretorio/arq3.txt
./diretorio/arq1.txt
./diretorio/arq5.txt
./arq3.txt
./arq1.txt
./arq5.txt



uendle@servidor1:~$ find -name "arq[^1,5]*"
./arq2.txt
./arq4.txt
./diretorio/arq2.txt
./diretorio/arq4.txt
./diretorio/arq3.txt
./arq3.txt



uendle@servidor1:~$ find -name "arq[^1,5]*"
./arq2.txt
./arq4.txt
./diretorio/arq2.txt
./diretorio/arq4.txt
./diretorio/arq3.txt
./arq3.txt



uendle@servidor1:/$ cd ~
uendle@servidor1:~$ ls
arq1.txt  arq2.txt  arq3.txt  arq4.txt  arq5.txt  diretorio


uendle@servidor1:~$ mkdir meu diretorio
mkdir: cannot create directory ‘diretorio’: File exists
uendle@servidor1:~$ ls
arq1.txt  arq2.txt  arq3.txt  arq4.txt  arq5.txt  diretorio  meu



uendle@servidor1:~$ mkdir 'meu diretorio'
uendle@servidor1:~$ ls
 arq1.txt   arq2.txt   arq3.txt   arq4.txt   arq5.txt   diretorio   meu  'meu diretorio'
 
 
 
uendle@servidor1:~$ rmdir meu
uendle@servidor1:~$ ls
 arq1.txt   arq2.txt   arq3.txt   arq4.txt   arq5.txt   diretorio  'meu diretorio'
 
 

uendle@servidor1:~$ rmdir diretorio/
rmdir: failed to remove 'diretorio/': Directory not empty


uendle@servidor1:~$ rm arq[^1]*
uendle@servidor1:~$ ls
 arq1.txt   diretorio  'meu diretorio'
 
 
 
 
 
 
 uendle@servidor1:/$ cat etc/group
root:x:0:
daemon:x:1:
bin:x:2:
sys:x:3:
adm:x:4:syslog,uendle
tty:x:5:
disk:x:6:
lp:x:7:
mail:x:8:
news:x:9:
uucp:x:10:
man:x:12:
proxy:x:13:
kmem:x:15:
dialout:x:20:
fax:x:21:
voice:x:22:
cdrom:x:24:uendle
floppy:x:25:
tape:x:26:
sudo:x:27:uendle
audio:x:29:
dip:x:30:uendle
www-data:x:33:
backup:x:34:
operator:x:37:
list:x:38:
irc:x:39:
src:x:40:
gnats:x:41:
shadow:x:42:
utmp:x:43:
video:x:44:
sasl:x:45:
plugdev:x:46:uendle
staff:x:50:
games:x:60:
users:x:100:
nogroup:x:65534:
systemd-journal:x:101:
systemd-network:x:102:
systemd-resolve:x:103:
messagebus:x:104:
systemd-timesync:x:105:
input:x:106:
sgx:x:107:
kvm:x:108:
render:x:109:
lxd:x:110:uendle
_ssh:x:111:
crontab:x:112:
syslog:x:113:
uuidd:x:114:
tcpdump:x:115:
tss:x:116:
landscape:x:117:
fwupd-refresh:x:118:
uendle:x:1000:







uendle@servidor1:/$ sudo mkdir aula
[sudo] password for uendle: 
uendle@servidor1:/$ ls
aula  boot   dev  home  lib32  libx32      media  opt   root  sbin  srv       sys  usr
bin   cdrom  etc  lib   lib64  lost+found  mnt    proc  run   snap  swap.img  tmp  var





uendle@servidor1:/aula$ touch arquivo.txt
touch: cannot touch 'arquivo.txt': Permission denied
uendle@servidor1:/aula$ sudo touch arquivo.txt
uendle@servidor1:/aula$ ls
arquivo.txt

uendle@servidor1:/aula$ rm arquivo.txt
rm: remove write-protected regular empty file 'arquivo.txt'? yes
rm: cannot remove 'arquivo.txt': Permission denied
uendle@servidor1:/aula$ sudo rm arquivo.txt
uendle@servidor1:/aula$ ls
uendle@servidor1:/aula$ cd ..
uendle@servidor1:/$ ls
aula  boot   dev  home  lib32  libx32      media  opt   root  sbin  srv       sys  usr
bin   cdrom  etc  lib   lib64  lost+found  mnt    proc  run   snap  swap.img  tmp  var




uendle@servidor1:/$ rmdir aula
rmdir: failed to remove 'aula': Permission denied
uendle@servidor1:/$ sudo rmdir aula
uendle@servidor1:/$ ls -l
total 2097224
lrwxrwxrwx   1 root root          7 fev 16  2024 bin -> usr/bin
drwxr-xr-x   4 root root       4096 mar 14 03:15 boot
dr-xr-xr-x   2 root root       4096 mar 13 02:59 cdrom
drwxr-xr-x  20 root root       4080 mar 17 01:44 dev
drwxr-xr-x  96 root root       4096 mar 14 03:15 etc
drwxr-xr-x   3 root root       4096 mar 13 03:26 home
lrwxrwxrwx   1 root root          7 fev 16  2024 lib -> usr/lib
lrwxrwxrwx   1 root root          9 fev 16  2024 lib32 -> usr/lib32
lrwxrwxrwx   1 root root          9 fev 16  2024 lib64 -> usr/lib64
lrwxrwxrwx   1 root root         10 fev 16  2024 libx32 -> usr/libx32
drwx------   2 root root      16384 mar 13 03:10 lost+found
drwxr-xr-x   2 root root       4096 fev 16  2024 media
drwxr-xr-x   2 root root       4096 fev 16  2024 mnt
drwxr-xr-x   2 root root       4096 fev 16  2024 opt
dr-xr-xr-x 164 root root          0 mar 17 01:44 proc
drwx------   4 root root       4096 mar 14 03:19 root
drwxr-xr-x  28 root root        840 mar 17 01:52 run
lrwxrwxrwx   1 root root          8 fev 16  2024 sbin -> usr/sbin
drwxr-xr-x   6 root root       4096 fev 16  2024 snap
drwxr-xr-x   2 root root       4096 fev 16  2024 srv
-rw-------   1 root root 2147483648 mar 13 03:15 swap.img
dr-xr-xr-x  13 root root          0 mar 17 01:44 sys
drwxrwxrwt  12 root root       4096 mar 17 01:49 tmp
drwxr-xr-x  14 root root       4096 fev 16  2024 usr
drwxr-xr-x  13 root root       4096 fev 16  2024 var






uendle@servidor1:/$ cat etc/sudoers
cat: etc/sudoers: Permission denied
uendle@servidor1:/$ sudo cat etc/sudoers
#
# This file MUST be edited with the 'visudo' command as root.
#
# Please consider adding local content in /etc/sudoers.d/ instead of
# directly modifying this file.
#
# See the man page for details on how to write a sudoers file.
#
Defaults	env_reset
Defaults	mail_badpass
Defaults	secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"
Defaults	use_pty

# This preserves proxy settings from user environments of root
# equivalent users (group sudo)
#Defaults:%sudo env_keep += "http_proxy https_proxy ftp_proxy all_proxy no_proxy"

# This allows running arbitrary commands, but so does ALL, and it means
# different sudoers have their choice of editor respected.
#Defaults:%sudo env_keep += "EDITOR"

# Completely harmless preservation of a user preference.
#Defaults:%sudo env_keep += "GREP_COLOR"

# While you shouldn't normally run git as root, you need to with etckeeper
#Defaults:%sudo env_keep += "GIT_AUTHOR_* GIT_COMMITTER_*"

# Per-user preferences; root won't have sensible values for them.
#Defaults:%sudo env_keep += "EMAIL DEBEMAIL DEBFULLNAME"

# "sudo scp" or "sudo rsync" should be able to use your SSH agent.
#Defaults:%sudo env_keep += "SSH_AGENT_PID SSH_AUTH_SOCK"

# Ditto for GPG agent
#Defaults:%sudo env_keep += "GPG_AGENT_INFO"

# Host alias specification

# User alias specification

# Cmnd alias specification

# User privilege specification
root	ALL=(ALL:ALL) ALL

# Members of the admin group may gain root privileges
%admin ALL=(ALL) ALL

# Allow members of group sudo to execute any command
%sudo	ALL=(ALL:ALL) ALL

# See sudoers(5) for more information on "@include" directives:

@includedir /etc/sudoers.d





uendle@servidor1:/$ sudo passwd root
New password: 
Retype new password: 
passwd: password updated successfully
uendle@servidor1:/$ su
Password: 
root@servidor1:/# ls
bin   cdrom  etc   lib    lib64   lost+found  mnt  proc  run   snap  swap.img  tmp  var
boot  dev    home  lib32  libx32  media       opt  root  sbin  srv   sys       usr
root@servidor1:/# pwd





root@servidor1:/# su uendle
uendle@servidor1:/$ su root
Password: 
root@servidor1:/# su
root@servidor1:/# ls
bin   cdrom  etc   lib    lib64   lost+found  mnt  proc  run   snap  swap.img  tmp  var
boot  dev    home  lib32  libx32  media       opt  root  sbin  srv   sys       usr








uendle@servidor1:/$ cat /etc/ssh/sshd_config

# This is the sshd server system-wide configuration file.  See
# sshd_config(5) for more information.

# This sshd was compiled with PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games

# The strategy used for options in the default sshd_config shipped with
# OpenSSH is to specify options with their default value where
# possible, but leave them commented.  Uncommented options override the
# default value.

Include /etc/ssh/sshd_config.d/*.conf

#Port 22
#AddressFamily any
#ListenAddress 0.0.0.0
#ListenAddress ::

#HostKey /etc/ssh/ssh_host_rsa_key
#HostKey /etc/ssh/ssh_host_ecdsa_key
#HostKey /etc/ssh/ssh_host_ed25519_key

# Ciphers and keying
#RekeyLimit default none

# Logging
#SyslogFacility AUTH
#LogLevel INFO

# Authentication:

#LoginGraceTime 2m
#PermitRootLogin yes libera o acesso remoto direto pelo root
#StrictModes yes
#MaxAuthTries 6
#MaxSessions 10

#PubkeyAuthentication yes

# Expect .ssh/authorized_keys2 to be disregarded by default in future.
#AuthorizedKeysFile	.ssh/authorized_keys .ssh/authorized_keys2

#AuthorizedPrincipalsFile none

#AuthorizedKeysCommand none
#AuthorizedKeysCommandUser nobody

# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
#HostbasedAuthentication no
# Change to yes if you don't trust ~/.ssh/known_hosts for
# HostbasedAuthentication
#IgnoreUserKnownHosts no
# Don't read the user's ~/.rhosts and ~/.shosts files
#IgnoreRhosts yes

# To disable tunneled clear text passwords, change to no here!
#PasswordAuthentication yes
#PermitEmptyPasswords no

# Change to yes to enable challenge-response passwords (beware issues with
# some PAM modules and threads)
KbdInteractiveAuthentication no

# Kerberos options
#KerberosAuthentication no
#KerberosOrLocalPasswd yes
#KerberosTicketCleanup yes
#KerberosGetAFSToken no

# GSSAPI options
#GSSAPIAuthentication no
#GSSAPICleanupCredentials yes
#GSSAPIStrictAcceptorCheck yes
#GSSAPIKeyExchange no

# Set this to 'yes' to enable PAM authentication, account processing,
# and session processing. If this is enabled, PAM authentication will
# be allowed through the KbdInteractiveAuthentication and
# PasswordAuthentication.  Depending on your PAM configuration,
# PAM authentication via KbdInteractiveAuthentication may bypass
# the setting of "PermitRootLogin without-password".
# If you just want the PAM account and session checks to run without
# PAM authentication, then enable this but set PasswordAuthentication
# and KbdInteractiveAuthentication to 'no'.
UsePAM yes

#AllowAgentForwarding yes
#AllowTcpForwarding yes
#GatewayPorts no
X11Forwarding yes
#X11DisplayOffset 10
#X11UseLocalhost yes
#PermitTTY yes
PrintMotd no
#PrintLastLog yes
#TCPKeepAlive yes
#PermitUserEnvironment no
#Compression delayed
#ClientAliveInterval 0
#ClientAliveCountMax 3
#UseDNS no
#PidFile /run/sshd.pid
#MaxStartups 10:30:100
#PermitTunnel no
#ChrootDirectory none
#VersionAddendum none

# no default banner path
#Banner none

# Allow client to pass locale environment variables
AcceptEnv LANG LC_*

# override default of no subsystems
Subsystem	sftp	/usr/lib/openssh/sftp-server

# Example of overriding settings on a per-user basis
#Match User anoncvs
#	X11Forwarding no
#	AllowTcpForwarding no
#	PermitTTY no
#	ForceCommand cvs server


 
 

uendle@servidor1:/$ sudo nano etc/ssh/sshd_config
[sudo] password for uendle: 
no nano ^ significa control





uendle@servidor1:/$ systemctl status sshd
● ssh.service - OpenBSD Secure Shell server
     Loaded: loaded (/lib/systemd/system/ssh.service; enabled; vendor preset: enabled)
     Active: active (running) since Mon 2025-03-17 01:44:17 UTC; 54min ago
       Docs: man:sshd(8)
             man:sshd_config(5)
    Process: 647 ExecStartPre=/usr/sbin/sshd -t (code=exited, status=0/SUCCESS)
   Main PID: 698 (sshd)
      Tasks: 1 (limit: 2224)
     Memory: 6.7M
        CPU: 166ms
     CGroup: /system.slice/ssh.service
             └─698 "sshd: /usr/sbin/sshd -D [listener] 0 of 10-100 startups"

mar 17 01:44:16 servidor1 systemd[1]: Starting OpenBSD Secure Shell server...
mar 17 01:44:17 servidor1 sshd[698]: Server listening on 0.0.0.0 port 22.
mar 17 01:44:17 servidor1 sshd[698]: Server listening on :: port 22.
mar 17 01:44:17 servidor1 systemd[1]: Started OpenBSD Secure Shell server.
mar 17 01:45:48 servidor1 sshd[967]: Accepted password for uendle from 192.168.31.138 port 60122 ssh2
mar 17 01:45:48 servidor1 sshd[967]: pam_unix(sshd:session): session opened for user uendle(uid=1000) by (uid=0)






uendle@servidor1:/$ systemctl restart sshd
==== AUTHENTICATING FOR org.freedesktop.systemd1.manage-units ===
Authentication is required to restart 'ssh.service'.
Authenticating as: uendle
Password: 
==== AUTHENTICATION COMPLETE ===






uendle@servidor1:/$ systemctl status sshd
● ssh.service - OpenBSD Secure Shell server
     Loaded: loaded (/lib/systemd/system/ssh.service; enabled; vendor preset: enabled)
     Active: active (running) since Mon 2025-03-17 02:42:00 UTC; 1min 49s ago
       Docs: man:sshd(8)
             man:sshd_config(5)
    Process: 1308 ExecStartPre=/usr/sbin/sshd -t (code=exited, status=0/SUCCESS)
   Main PID: 1310 (sshd)
      Tasks: 1 (limit: 2224)
     Memory: 1.7M
        CPU: 306ms
     CGroup: /system.slice/ssh.service
             └─1310 "sshd: /usr/sbin/sshd -D [listener] 0 of 10-100 startups"

mar 17 02:42:00 servidor1 systemd[1]: Stopped OpenBSD Secure Shell server.
mar 17 02:42:00 servidor1 systemd[1]: Starting OpenBSD Secure Shell server...
mar 17 02:42:00 servidor1 sshd[1310]: Server listening on 0.0.0.0 port 22.
mar 17 02:42:00 servidor1 sshd[1310]: Server listening on :: port 22.
mar 17 02:42:00 servidor1 systemd[1]: Started OpenBSD Secure Shell server.
mar 17 02:42:28 servidor1 sshd[1311]: Accepted password for root from 192.168.31.138 port 44000 ssh2
mar 17 02:42:28 servidor1 sshd[1311]: pam_unix(sshd:session): session opened for user root(uid=0) by (uid=0)
mar 17 02:43:40 servidor1 sshd[1393]: Accepted password for uendle from 192.168.31.138 port 45324 ssh2
mar 17 02:43:40 servidor1 sshd[1393]: pam_unix(sshd:session): session opened for user uendle(uid=1000) by (uid=0)
mar 17 02:43:45 servidor1 sshd[1393]: pam_unix(sshd:session): session closed for user uendle








root@servidor1:/# vi leia.txt
root@servidor1:/# cat leia.txt 
meu texto e esse!!
root@servidor1:/# vi leia.txt 
root@servidor1:/# cat leia.txt 
meu texto e esse!
esse e o vi 
percione i para intrar no modo de inserçao
:para abrir o menu
esc pra sair da inserção
!





uendle@servidor1:/$ history 10
   42  date
   43  cd #
   44  ls
   45  pwd
   46  init 0 &&  exit
   47  init 0
   48  sudo init 0
   49  exit
   50  history 1000
   51  history 10






uendle@servidor1:/$ set +o history # este comando para de registrar no history os comandos
uendle@servidor1:/$ set -o history # este comando volta a registrar no history os comandos
uendle@servidor1:/$ history -c # apaga o histrorico de comandos de todos os usuarios menos do root







uendle@servidor1:/$ history 20
   42  date
   43  cd #
   44  ls
   45  pwd
   46  init 0 &&  exit
   47  init 0
   48  sudo init 0
   49  exit
   50  history 1000
   51  history 10
   52  clear
   53  history 10
   54  pwd
   55  history20
   56  history 20
   57  sudo su
   58  ls
   59  pwd
   60  clear
   61  history 20
uendle@servidor1:/$ pwd
/
uendle@servidor1:/$ !!
pwd
/
uendle@servidor1:/$ !44
ls
bin   cdrom  etc   leia.txt  lib32  libx32      media  opt   root  sbin  srv       sys  usr
boot  dev    home  lib       lib64  lost+found  mnt    proc  run   snap  swap.img  tmp  var
uendle@servidor1:/$ !?te
date
seg 17 mar 2025 03:21:39 UTC
uendle@servidor1:/$ history | grep "leia"
   65  history | grep "leia"
uendle@servidor1:/$ history | grep "pasta"
   66  history | grep "pasta"
uendle@servidor1:/$ history | grep "ls"
    2  ls
    5  ls
   29  ls
   31  ls
   34  ls
   36  ls
   39  ls
   44  ls
   58  ls
   63  ls
   67  history | grep "ls"
uendle@servidor1:/$ history | grep "end"
   68  history | grep "end"
uendle@servidor1:/$ export HISTTIMEFORMAT="%c "
uendle@servidor1:/$ history 
    1  seg 17 mar 2025 03:13:16 clear
    2  seg 17 mar 2025 03:13:16 ls
    3  seg 17 mar 2025 03:13:16 cd /
    4  seg 17 mar 2025 03:13:16 la
    5  seg 17 mar 2025 03:13:16 ls
    6  seg 17 mar 2025 03:13:16 clera
    7  seg 17 mar 2025 03:13:16 clear
    8  seg 17 mar 2025 03:13:16 reboot 0
    9  seg 17 mar 2025 03:13:16 sudo reboot
   10  seg 17 mar 2025 03:13:16 ip a
   11  seg 17 mar 2025 03:13:16 sudo apt ssh-server
   12  seg 17 mar 2025 03:13:16 sudo apt-get install ssh-server
   13  seg 17 mar 2025 03:13:16 sudo apt-get install openssh-server
   14  seg 17 mar 2025 03:13:16 ip a
   15  seg 17 mar 2025 03:13:16 sudo apt-get install openssh-server
   16  seg 17 mar 2025 03:13:16 clear
   17  seg 17 mar 2025 03:13:16 ip a
   18  seg 17 mar 2025 03:13:16 sudo su
   19  seg 17 mar 2025 03:13:16 clear
   20  seg 17 mar 2025 03:13:16 ip a
   21  seg 17 mar 2025 03:13:16 sudo apt-get install openssh-server
   22  seg 17 mar 2025 03:13:16 sudo su
   23  seg 17 mar 2025 03:13:16 clear
   24  seg 17 mar 2025 03:13:16 ip a
   25  seg 17 mar 2025 03:13:16 reboot
   26  seg 17 mar 2025 03:13:16 init 0
   27  seg 17 mar 2025 03:13:16 ip a
   28  seg 17 mar 2025 03:13:16 clear
   29  seg 17 mar 2025 03:13:16 ls
   30  seg 17 mar 2025 03:13:16 cd ~
   31  seg 17 mar 2025 03:13:16 ls
   32  seg 17 mar 2025 03:13:16 cd.
   33  seg 17 mar 2025 03:13:16 cd .
   34  seg 17 mar 2025 03:13:16 ls
   35  seg 17 mar 2025 03:13:16 cd /
   36  seg 17 mar 2025 03:13:16 ls
   37  seg 17 mar 2025 03:13:16 clear
   38  seg 17 mar 2025 03:13:16 cd ~
   39  seg 17 mar 2025 03:13:16 ls
   40  seg 17 mar 2025 03:13:16 sudo
   41  seg 17 mar 2025 03:13:16 sudo su
   42  seg 17 mar 2025 03:13:16 date
   43  seg 17 mar 2025 03:13:16 cd #
   44  seg 17 mar 2025 03:13:16 ls
   45  seg 17 mar 2025 03:13:16 pwd
   46  seg 17 mar 2025 03:13:16 init 0 &&  exit
   47  seg 17 mar 2025 03:13:16 init 0
   48  seg 17 mar 2025 03:13:16 sudo init 0
   49  seg 17 mar 2025 03:13:16 exit
   50  seg 17 mar 2025 03:13:26 history 1000
   51  seg 17 mar 2025 03:13:35 history 10
   52  seg 17 mar 2025 03:14:03 clear
   53  seg 17 mar 2025 03:14:45 history 10
   54  seg 17 mar 2025 03:14:59 pwd
   55  seg 17 mar 2025 03:16:06 history20
   56  seg 17 mar 2025 03:16:10 history 20
   57  seg 17 mar 2025 03:16:29 sudo su
   58  seg 17 mar 2025 03:17:17 ls
   59  seg 17 mar 2025 03:17:36 pwd
   60  seg 17 mar 2025 03:19:59 clear
   61  seg 17 mar 2025 03:20:21 history 20
   62  seg 17 mar 2025 03:20:37 pwd
   63  seg 17 mar 2025 03:21:00 ls
   64  seg 17 mar 2025 03:21:39 date
   65  seg 17 mar 2025 03:22:19 history | grep "leia"
   66  seg 17 mar 2025 03:22:42 history | grep "pasta"
   67  seg 17 mar 2025 03:23:28 history | grep "ls"
   68  seg 17 mar 2025 03:24:22 history | grep "end"
   69  seg 17 mar 2025 03:27:12 export HISTTIMEFORMAT="%c "
   70  seg 17 mar 2025 03:27:17 history 
   
   
   
   
   
   
   
uendle@servidor1:/$ cd home/
uendle@servidor1:/home$ ls
uendle
uendle@servidor1:/home$ ls -a
.  ..  uendle
uendle@servidor1:/home$ cd uendle
uendle@servidor1:~$ ls -a
 .    arq1.txt        .bash_history   .bashrc   diretorio   .local           .profile   .sudo_as_admin_successful
 ..  'arq[2-6].txt'   .bash_logout    .cache    .lesshst   'meu diretorio'   .ssh       .viminfo
uendle@servidor1:~$ cat .bashrc 
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000 #DETERMINA O TAMANDO DO HISTORICO EM LINHAS
HISTFILESIZE=2000 # DETERMINA O TAMANHO DO ARQUIVO QUANDO SALVO EM BYTES

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
uendle@servidor1:~$ nano .bashrc 










uendle@servidor1:~$ history --help
history: history [-c] [-d offset] [n] or history -anrw [filename] or history -ps arg [arg...]
    Display or manipulate the history list.
    
    Display the history list with line numbers, prefixing each modified
    entry with a `*'.  An argument of N lists only the last N entries.
    
    Options:
      -c	clear the history list by deleting all of the entries
      -d offset	delete the history entry at position OFFSET. Negative
    		offsets count back from the end of the history list
    
      -a	append history lines from this session to the history file
      -n	read all history lines not already read from the history file
    		and append them to the history list
      -r	read the history file and append the contents to the history
    		list
      -w	write the current history to the history file
    
      -p	perform history expansion on each ARG and display the result
    		without storing it in the history list
      -s	append the ARGs to the history list as a single entry
    
    If FILENAME is given, it is used as the history file.  Otherwise,
    if HISTFILE has a value, that is used, else ~/.bash_history.
    
    If the HISTTIMEFORMAT variable is set and not null, its value is used
    as a format string for strftime(3) to print the time stamp associated
    with each displayed history entry.  No time stamps are printed otherwise.
    
    Exit Status:
    Returns success unless an invalid option is given or an error occurs.
uendle@servidor1:~$ 









